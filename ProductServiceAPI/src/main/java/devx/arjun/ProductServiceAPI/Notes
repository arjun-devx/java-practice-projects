Calling 3rd Party APIs

1. Write the mechanism to call - getALLProduct and getProductById APIs on fakeStore
2. Create our own APIs, to get all products and getProductById which will internally call fakeStore and show the data


CLIENT <-> ProductService <-> FakeStoreAPI

controller -> contains the APIs
service -> contains the business logic
repository -> talks to DBs, does CRUD
model -> contains the schema
client -> classes that will talk to other services


ProductService -> FakeStore Service
FakeStoreClient -> Contains the code to communicate with FakeStore


Spring ->
RestTemplate -> going to be deprecated || use RestTemplate - library
WebClient -> latest


------------------
Cardinality among the models

Product

Category



Product
        Category category;

Category

        List<Product> product;


Maintain version in the API URL --> /something/v1/something/
Whenever we change the API Contract -> we should also change the URL
We change the versions in the url v1 -> v2
new url -> /something/v2/something

API contract -> How to use the API, the inputs required and the output structure


---------------


repo -> Product findById(id) -> returning entire Product[5]
service -> service -> get entire Product[5]
controller -> service -> get entire product[5]

controller can convert object to DTO -> return to UI with lesser attributes  ProductDTO[2]

repo -> ProductProject findById[id] -> return subset of Product, ProductProjection[3]
service -> gets smaller subset -> ProductProjection[3]
controller -> service -> ProductProjection[3]

controller can again use a DTO -> return even smaller subset.
ProductInfoDTO[]2

-------------------

------- Requirements for product service ------
1. CRUD operations on Product
2. CRUD operations on Category
3. Get all products from Category API
4. Get Category from Product API -- HOMEWORK
5. Add Category to Product ==> updateProductApi()
6. Remove category from Product
7. Add product to category
8. Remove product from category

5-7 and 6-8 are essentially same at DB level, but can be perceived differently
at an API level.



Entity

Product -> does not contain Category
Category -> contains List<Product>

First save the product, then add product to category, then save category

DB
Product table -> categoryID foreign key
Category table -> does not contain any info

